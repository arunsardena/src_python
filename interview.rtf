{\rtf1\ansi\ansicpg1252\cocoartf2818
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww29200\viewh17840\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\
\pard\pardeftab720\partightenfactor0

\f1\fs29\fsmilli14667 \cf0 Python questions:\
\
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs29\fsmilli14667 \cf0 Difference between tuple and list in terms of performance:
\f0\fs24 \

\f1\fs29\fsmilli14667 The assignment is same in both, they store 32 bit item in contiguous fashion, if any element is repeating it refer to the same memory address again. The real difference is that there is no operational overhead of resizing, restructuring, re-assignment, deleting, interesting of element in tuple, which makes it much lighter to work with.
\f0\fs24 \

\f1\fs29\fsmilli14667 What is duck typing in python
\f0\fs24 \

\f1\fs29\fsmilli14667 What is Diamond hierarchy
\f0\fs24 \

\f1\fs29\fsmilli14667 It comes when A , B(A), C(A), D(B,C) so B will get priority, in that case to use A\'92s functions it is not available on python, only in c++ and java
\f0\fs24 \

\f1\fs29\fsmilli14667 Polymorphism: In python we can not override directly, but can make different class with same name function give functionality same as polymorphism.
\f0\fs24 \

\f1\fs29\fsmilli14667 Abstraction: hiding the internal implementation of the system from the outer world, like in Car class we have different function as break, accelerator, clutch, but how they interact with each is hidden from outer world.
\f0\fs24 \

\f1\fs29\fsmilli14667 Encapsulation: Is a process of bundling the variables and method into a single source of unit called class where we can maintain the state of the Class, and hide the important information as needed from the outer world.
\f0\fs24 \

\f1\fs29\fsmilli14667 Inheritance: Inheriting the variable and methods from the base class,
\f0\fs24 \

\f1\fs29\fsmilli14667 Single: one to one
\f0\fs24 \

\f1\fs29\fsmilli14667 Multiple: two to one
\f0\fs24 \

\f1\fs29\fsmilli14667 Multilevel: one to one to one to one
\f0\fs24 \

\f1\fs29\fsmilli14667 Hierarchical: one to two or more\'a0
\f0\fs24 \

\f1\fs29\fsmilli14667 What is serialization and json.dump and dump, loads and load
\f0\fs24 \

\f1\fs29\fsmilli14667 Pickling
\f0\fs24 \

\f1\fs29\fsmilli14667 Decorators
\f0\fs24 \

\f1\fs29\fsmilli14667 Generators / iterator / iterable
\f0\fs24 \

\f1\fs29\fsmilli14667 File handling
\f0\fs24 \

\f1\fs29\fsmilli14667 Exception Handling
\f0\fs24 \

\f1\fs29\fsmilli14667 Multithreading
\f0\fs24 \

\f1\fs29\fsmilli14667 REGEX: match/search. Compile and sub, use of \\r, for escape sequence to escape special meaning. I.e. \\s, \\r will take as plain \\s and \\r.
\f0\fs24 \
\
\

\f1\fs29\fsmilli14667 Python build in now mostly are class obj and these class are of type.
\f0\fs24 \
\
\

\f1\fs29\fsmilli14667 For loop only required integer value in range(), start,end,separator should be integer only
\f0\fs24 \
\
\

\f1\fs29\fsmilli14667 Python Questions:
\f0\fs24 \
\
\

\f1\fs29\fsmilli14667 Buildin Function,\'a0
\f0\fs24 \

\f1\fs29\fsmilli14667 Import building methods, we can import and see what are the build in methods, we can override them and they are by default available on the global namespace.
\f0\fs24 \
\
\

\f1\fs29\fsmilli14667 Dundar Method:
\f0\fs24 \
\
\

\f1\fs29\fsmilli14667 We cannot use extra arguments with dundar/magic method, it will through TypeError Error.
\f0\fs24 \

\f1\fs29\fsmilli14667 Operators: __add__, __sub__, __mul__, it use extra one parameter
\f0\fs24 \

\f1\fs29\fsmilli14667 Comparison: __le__, __eq__, __ne__, it uses one extra paramenter
\f0\fs24 \

\f1\fs29\fsmilli14667 __len__ no extra parameter required, __contains__, __getitem__(used when we access element with indexing, need one extra paramter)
\f0\fs24 \

\f1\fs29\fsmilli14667 If we override the dunder it will consider the last one, and last one should have valid num of parameter, it will not through error to past wrong parameter dundar because it checks for iit at runtime.
\f0\fs24 \
\
\

\f1\fs29\fsmilli14667 Basic:
\f0\fs24 \

\f1\fs29\fsmilli14667 How python executes code? Compiler vs interpreter ? is it slow / fast ?\'a0
\f0\fs24 \

\f1\fs29\fsmilli14667 Data structure, list/dict/tuple/set, pack/unpack, parameter passing format, module/package/libarary
\f0\fs24 \

\f1\fs29\fsmilli14667 Regex\'a0
\f0\fs24 \

\f1\fs29\fsmilli14667 Class and obj:
\f0\fs24 \

\f1\fs29\fsmilli14667 Descriptors, special method, meta class, single/double underscore,
\f0\fs24 \

\f1\fs29\fsmilli14667 __dict__, vars(),dir(), sys.
\f0\fs24 \
\
\

\f1\fs29\fsmilli14667 Decorators: are more in functional paradigm
\f0\fs24 \

\f1\fs29\fsmilli14667 Error Handling:
\f0\fs24 \

\f1\fs29\fsmilli14667 Attribute Error vs Name error confusion
\f0\fs24 \

\f1\fs29\fsmilli14667 Type error: when passing extra or less or invalide value to func, or performing invalid type operation
\f0\fs24 \

\f1\fs29\fsmilli14667 NameError: when trying to acces non defined variables
\f0\fs24 \
\
\
\

\f1\fs29\fsmilli14667 Compiler: is a program which coverts one language to the other
\f0\fs24 \

\f1\fs29\fsmilli14667 Interpreter: Python interpreter is python .exe code which is a compilation of C programming code(CPython) to make a runtime for execution of the code, which executes our code line by line.
\f0\fs24 \

\f1\fs29\fsmilli14667 a:= := is a python grammar syntax newly added, which is used in an expression to assign the value at runtime. And can be used after the execution
\f0\fs24 \

\f1\fs29\fsmilli14667 Used to reduce the number of function class to be used, shorthand to write a separate statement and clearer code
\f0\fs24 \

\f1\fs29\fsmilli14667 Shorter, fast execution, clear
\f0\fs24 \

\f1\fs29\fsmilli14667 If a:=checkPermission(True):
\f0\fs24 \

\f1\fs29\fsmilli14667 If a:
\f0\fs24 \

\f1\fs29\fsmilli14667 print(it is true)
\f0\fs24 \
\
\
\

\f1\fs29\fsmilli14667 Python Classes Concepts:
\f0\fs24 \

\f1\fs29\fsmilli14667 Encapsulation: Encapsulation in OOP is way to protect the object state and it\'92s data from the outside word, in other programming language we use private protected, keywords and restrict the access of the data but in python we can access the data globally, but to restrict the direct access to the obj we can hint the developer to not use the private and protect data by specifying the data with special naming convention.\'a0
\f0\fs24 \

\f1\fs29\fsmilli14667 Protected attributed: with leading one underscore, _ it do not protect the access from outside give developer an idea that it should be accessible from outside of the class and limit to the class only.
\f0\fs24 \

\f1\fs29\fsmilli14667 This is used in descriptor, to assign a value
\f0\fs24 \

\f1\fs29\fsmilli14667 Self._name = name
\f0\fs24 \

\f1\fs29\fsmilli14667 Private attribute: __ start with leading two underscore, it does the name mangling in python which means that data can be accessible normally inside the class using obj.__start. But from outside we can\'92t do obj.__start. Python will store it as _ClassName__attribute_name so if we want use it from outside of class of from base class we have use it as obj._ClassName__attribute_name
\f0\fs24 \

\f1\fs29\fsmilli14667 We can define it as class attribute, i.e. can be accessible with obj._ClassName__attribute and classname._classname__attribute, because it is class attribute
\f0\fs24 \

\f1\fs29\fsmilli14667 Instance attribute: we can only access with obj._classname__attribute
\f0\fs24 \

\f1\fs29\fsmilli14667 __dict__ / vars(), __slots__ \uc0\u8594 \'a0
\f0\fs24 \

\f1\fs29\fsmilli14667 What is python class ? python class is a namespace to store the methods and attributes inside it. Python uses OOP principles and class act as a blueprint to define the common set of attributes and methods. We instantiate the object from class and now each obj will have same set of property and functionality.\'a0
\f0\fs24 \

\f1\fs29\fsmilli14667 An object will have own __dict__ dictionary which contains the total attributes defined for the object. When we try to access any obj attribute python interpreter check the obj __dict__ if it finds it will return, else it will look for class __dict__ dictionary and lookup there and if it do not find, it will raise a Attribute error.
\f0\fs24 \

\f1\fs29\fsmilli14667 An class will have class attribute and class methods in __dict__ when calling any method python will look for the method in the __dict__ of the class and return the value, if it do find it will raise attribute error.
\f0\fs24 \

\f1\fs29\fsmilli14667 We can dynamically inject the value in __dict__, to prevent from recursion depth error which occurs by using descriptors/property tag.
\f0\fs24 \

\f1\fs29\fsmilli14667 @property attribute is a descriptor:
\f0\fs24 \
\
\
\

\f1\fs29\fsmilli14667 Threading and MultiProcessing:
\f0\fs24 \

\f1\fs29\fsmilli14667 Multiprocessing and multithreading achieves concurrency.\'a0
\f0\fs24 \

\f1\fs29\fsmilli14667 Concurrency define being able to execute a multiple tasks at the same time. But it is misleading we do not execute tasks at the exactly same time.
\f0\fs24 \

\f1\fs29\fsmilli14667 1 process switches between tasks, while another tasks is busy with I/0 operations. Python memory management is not thread safe, we get Global interpreter lock, which allows only one thread to have control.\'a0
\f0\fs24 \

\f1\fs29\fsmilli14667 Mupltiprocessing: can achieve the parallel tasks, because it is not limited by global interpreter lock. And we spin up completely different processes.
\f0\fs24 \
\
\
\
}