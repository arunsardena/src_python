

Python questions:


Difference between tuple and list in terms of performance:

The assignment is same in both, they store 32 bit item in contiguous fashion, if any element is repeating it refer to the same memory address again. The real difference is that there is no operational overhead of resizing, restructuring, re-assignment, deleting, interesting of element in tuple, which makes it much lighter to work with.

What is duck typing in python
What is Diamond hierarchy
It comes when A , B(A), C(A), D(B,C) so B will get priority, in that case to use A’s functions it is not available on python, only in c++ and java
Polymorphism: In python we can not override directly, but can make different class with same name function give functionality same as polymorphism.
Abstraction: hiding the internal implementation of the system from the outer world, like in Car class we have different function as break, accelerator, clutch, but how they interact with each is hidden from outer world.
Encapsulation: Is a process of bundling the variables and method into a single source of unit called class where we can maintain the state of the Class, and hide the important information as needed from the outer world.
Inheritance: Inheriting the variable and methods from the base class,
Single: one to one
Multiple: two to one
Multilevel: one to one to one to one
Hierarchical: one to two or more 
What is serialization and json.dump and dump, loads and load
Pickling
Decorators
Generators / iterator / iterable
File handling
Exception Handling
Multithreading
REGEX: match/search. Compile and sub, use of \r, for escape sequence to escape special meaning. I.e. \s, \r will take as plain \s and \r.


Python build in now mostly are class obj and these class are of type.


For loop only required integer value in range(), start,end,separator should be integer only


Python Questions:


Buildin Function, 
Import building methods, we can import and see what are the build in methods, we can override them and they are by default available on the global namespace.


Dundar Method:


We cannot use extra arguments with dundar/magic method, it will through TypeError Error.
Operators: __add__, __sub__, __mul__, it use extra one parameter
Comparison: __le__, __eq__, __ne__, it uses one extra paramenter
__len__ no extra parameter required, __contains__, __getitem__(used when we access element with indexing, need one extra paramter)
If we override the dunder it will consider the last one, and last one should have valid num of parameter, it will not through error to past wrong parameter dundar because it checks for iit at runtime.


Basic:
How python executes code? Compiler vs interpreter ? is it slow / fast ? 
Data structure, list/dict/tuple/set, pack/unpack, parameter passing format, module/package/libarary
Regex 
Class and obj:
Descriptors, special method, meta class, single/double underscore,
__dict__, vars(),dir(), sys.


Decorators: are more in functional paradigm
Error Handling:
Attribute Error vs Name error confusion
Type error: when passing extra or less or invalide value to func, or performing invalid type operation
NameError: when trying to acces non defined variables



Compiler: is a program which coverts one language to the other
Interpreter: Python interpreter is python .exe code which is a compilation of C programming code(CPython) to make a runtime for execution of the code, which executes our code line by line.
a:= := is a python grammar syntax newly added, which is used in an expression to assign the value at runtime. And can be used after the execution
Used to reduce the number of function class to be used, shorthand to write a separate statement and clearer code
Shorter, fast execution, clear
If a:=checkPermission(True):
If a:
print(it is true)



Python Classes Concepts:
Encapsulation: Encapsulation in OOP is way to protect the object state and it’s data from the outside word, in other programming language we use private protected, keywords and restrict the access of the data but in python we can access the data globally, but to restrict the direct access to the obj we can hint the developer to not use the private and protect data by specifying the data with special naming convention. 
Protected attributed: with leading one underscore, _ it do not protect the access from outside give developer an idea that it should be accessible from outside of the class and limit to the class only.
This is used in descriptor, to assign a value
Self._name = name
Private attribute: __ start with leading two underscore, it does the name mangling in python which means that data can be accessible normally inside the class using obj.__start. But from outside we can’t do obj.__start. Python will store it as _ClassName__attribute_name so if we want use it from outside of class of from base class we have use it as obj._ClassName__attribute_name
We can define it as class attribute, i.e. can be accessible with obj._ClassName__attribute and classname._classname__attribute, because it is class attribute
Instance attribute: we can only access with obj._classname__attribute
__dict__ / vars(), __slots__ → 
What is python class ? python class is a namespace to store the methods and attributes inside it. Python uses OOP principles and class act as a blueprint to define the common set of attributes and methods. We instantiate the object from class and now each obj will have same set of property and functionality. 
An object will have own __dict__ dictionary which contains the total attributes defined for the object. When we try to access any obj attribute python interpreter check the obj __dict__ if it finds it will return, else it will look for class __dict__ dictionary and lookup there and if it do not find, it will raise a Attribute error.
An class will have class attribute and class methods in __dict__ when calling any method python will look for the method in the __dict__ of the class and return the value, if it do find it will raise attribute error.
We can dynamically inject the value in __dict__, to prevent from recursion depth error which occurs by using descriptors/property tag.
@property attribute is a descriptor:



Threading and MultiProcessing:
Multiprocessing and multithreading achieves concurrency. 
Concurrency define being able to execute a multiple tasks at the same time. But it is misleading we do not execute tasks at the exactly same time.
1 process switches between tasks, while another tasks is busy with I/0 operations. Python memory management is not thread safe, we get Global interpreter lock, which allows only one thread to have control. 
Mupltiprocessing: can achieve the parallel tasks, because it is not limited by global interpreter lock. And we spin up completely different processes.



